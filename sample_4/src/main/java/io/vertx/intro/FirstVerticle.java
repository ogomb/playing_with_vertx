package io.vertx.intro;


import io.reactivex.Completable;
import io.reactivex.Single;
import io.vertx.core.Future;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.sql.SQLOptions;
import io.vertx.reactivex.CompletableHelper;
import io.vertx.reactivex.config.ConfigRetriever;
import io.vertx.reactivex.core.AbstractVerticle;
import io.vertx.reactivex.core.buffer.Buffer;
import io.vertx.reactivex.core.http.HttpServerResponse;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import io.vertx.reactivex.ext.sql.SQLConnection;
import io.vertx.reactivex.ext.web.Router;
import io.vertx.reactivex.ext.web.RoutingContext;
import io.vertx.reactivex.ext.web.handler.BodyHandler;
import io.vertx.reactivex.ext.web.handler.StaticHandler;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

import static io.vertx.intro.ActionHelper.*;


public class FirstVerticle extends AbstractVerticle {

    JDBCClient jdbc;

    /*
    When packaging the app and running it do this
    java -jar target/my-first-app-1.0-SNAPSHOT.jar -conf src/main/conf/application-conf.json

    to include the configurations if you have them.

    But this method is not that right what of secret configurations?

    vertx-config to the rescue

     */
    @Override
    public void start(Future fut) throws Exception {
        Router router = Router.router(vertx);

        router.route("/").handler(rc -> {
            HttpServerResponse response = rc.response();
            response
                    .putHeader("content-type", "text/html")
                    .end("</pre> <h1> Hi vert.x application</h1>");
        });


        //enable reading of the body for the post request
        router.route("/api/articles").handler(BodyHandler.create());
        router.post("/api/articles").handler(this::addOne);

        router.get("/api/articles").handler(this::getAll);
        router.delete("/api/articles/:id").handler(this::deleteOne);
        router.get("/api/articles/:id").handler(this::getOne);
        router.put("/api/articles/:id").handler(this::updateOne);
        router.route("/assets/*").handler(StaticHandler.create("assets"));

        ConfigRetriever retriever = ConfigRetriever.create(vertx);
        retriever.rxGetConfig()
                .doOnSuccess(config ->
                        jdbc = JDBCClient.createShared(vertx, config, "read-List"))
                .flatMap(config ->
                        connect()
                                .flatMap(connection ->
                                        this.createTableIfNeeded((SQLConnection) connection)
                                                .flatMap(c-> createSomeDataIfNone((SQLConnection) c))
                                                .doAfterTerminate(((SQLConnection) connection)::close)
                                )
                                .map(x -> config)
                )
                .flatMapCompletable(c -> createHttpServer((JsonObject) c, router))
                .subscribe(CompletableHelper.toObserver(fut));
    }


    private Completable createHttpServer(JsonObject config, Router router) {
        return vertx
                .createHttpServer()
                .requestHandler(router::accept)
                .rxListen(config.getInteger("HTTP_PORT", 8080))
                .toCompletable();
    }



    private void getAll(RoutingContext rc) {
        connect()
                .flatMap(c-> query((SQLConnection) c))
                .subscribe(ok(rc));
    }



    private void addOne(RoutingContext rc) {
        Article article = rc.getBodyAsJson().mapTo(Article.class);
        connect()
                .flatMap(c -> insert((SQLConnection) c, article, true))
                .subscribe(created(rc));
    }
    private void deleteOne(RoutingContext rc) {
        String id = rc.pathParam("id");
        connect()
                .flatMapCompletable(c -> delete((SQLConnection) c, id))
                .subscribe(noContent(rc), onError(rc));
    }


    private void getOne(RoutingContext rc) {
        String id = rc.pathParam("id");
        connect()
                .flatMap(connection -> queryOne((SQLConnection) connection, id))
                .subscribe(ok(rc));
    }

    private void updateOne(RoutingContext rc) {
        String id = rc.request().getParam("id");
        Article article = rc.getBodyAsJson()
                .mapTo(Article.class);
        connect()
                .flatMapCompletable(c -> update((SQLConnection) c, id, article))
                .subscribe(noContent(rc), onError(rc));
    }

    private Single connect() {
        return jdbc.rxGetConnection()
                .map(c -> c.setOptions(
                        new SQLOptions().setAutoGeneratedKeys(true)));
    }

    private Single createTableIfNeeded(SQLConnection connection) {
        return vertx.fileSystem().rxReadFile("tables.sql")
                .map(Buffer::toString)
                .flatMapCompletable(connection::rxExecute)
                .toSingleDefault(connection);
    }


    private Single createSomeDataIfNone(SQLConnection c) {
        return c.rxQuery("SELECT * FROM Articles")
                .flatMap(rs -> {
                    if (rs.getResults().isEmpty()) {
                        Article article1 = new Article("Fallacies of distributed computing",
                                "https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing");
                        Article article2 = new Article("Reactive Manifesto",
                                "https://www.reactivemanifesto.org/");
                        return Single.zip(
                                insert(c, article1, false),
                                insert(c, article2, false),
                                (a1, a2) -> c);
                    } else {
                        return Single.just(c);
                    }
                });
    }

    private Single<Article> insert(SQLConnection connection, Article article, boolean closeConnection) {
        String sql = "INSERT INTO Articles (title, url) VALUES (?, ?)";
        return connection.rxUpdateWithParams(sql, new JsonArray().add(article.getTitle()).add(article.getUrl()))
                .map(res -> new Article(res.getKeys().getLong(0), article.getTitle(), article.getUrl()))
                .doFinally(() -> {
                    if (closeConnection) {
                        connection.close();
                    }
                });
    }


    private Single<List<Article>> query(SQLConnection connection) {
        return connection.rxQuery("SELECT * FROM articles")
                .map(rs -> rs.getRows().stream()
                .map(Article::new)
                .collect(Collectors.toList())
    )
    .doFinally(connection::close);
    }


    private Single<Article> queryOne(SQLConnection connection, String id) {
        String sql = "SELECT * FROM articles WHERE id = ?";
        return connection.rxQueryWithParams(sql, new JsonArray().add(Integer.valueOf(id)))
                .doFinally(connection::close)
                .map(rs -> {
                    List rows = rs.getRows();
                    if (rows.size() == 0) {
                        throw new NoSuchElementException("No article with id " + id);
                    } else {
                        JsonObject row = (JsonObject) rows.get(0);
                        return new Article(row);
                    }
                });
    }

    private Completable update(SQLConnection connection, String id, Article article) {
        String sql = "UPDATE articles SET title = ?, url = ? WHERE id = ?";
        JsonArray params = new JsonArray().add(article.getTitle())
                .add(article.getUrl())
                .add(Integer.valueOf(id));
        return connection.rxUpdateWithParams(sql, params)
                .flatMapCompletable(ur ->
                        ur.getUpdated() == 0 ?
                                Completable.error(new NoSuchElementException("No article with id " + id)) :
                                Completable.complete())
                .doFinally(connection::close);
    }

    private Completable delete(SQLConnection connection, String id) {
        String sql = "DELETE FROM Articles WHERE id = ?";
        JsonArray params = new JsonArray().add(Integer.valueOf(id));
        return connection.rxUpdateWithParams(sql, params)
                .doFinally(connection::close)
                .flatMapCompletable(ur -> ur.getUpdated() == 0 ?
                                Completable.error(new NoSuchElementException("No article with id " + id)):
                        Completable.complete()
                );
    }
}

